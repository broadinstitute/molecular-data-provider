# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OperationFillParametersOneOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, denylist=None, qedge_keys=None):  # noqa: E501
        """OperationFillParametersOneOf1 - a model defined in OpenAPI

        :param denylist: The denylist of this OperationFillParametersOneOf1.  # noqa: E501
        :type denylist: List[str]
        :param qedge_keys: The qedge_keys of this OperationFillParametersOneOf1.  # noqa: E501
        :type qedge_keys: List[str]
        """
        self.openapi_types = {
            'denylist': List[str],
            'qedge_keys': List[str]
        }

        self.attribute_map = {
            'denylist': 'denylist',
            'qedge_keys': 'qedge_keys'
        }

        self._denylist = denylist
        self._qedge_keys = qedge_keys

    @classmethod
    def from_dict(cls, dikt) -> 'OperationFillParametersOneOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationFill_parameters_oneOf_1 of this OperationFillParametersOneOf1.  # noqa: E501
        :rtype: OperationFillParametersOneOf1
        """
        return util.deserialize_model(dikt, cls)

    @property
    def denylist(self):
        """Gets the denylist of this OperationFillParametersOneOf1.

        List of knowledge providers/sources that may NOT be used to provide knowledge.  # noqa: E501

        :return: The denylist of this OperationFillParametersOneOf1.
        :rtype: List[str]
        """
        return self._denylist

    @denylist.setter
    def denylist(self, denylist):
        """Sets the denylist of this OperationFillParametersOneOf1.

        List of knowledge providers/sources that may NOT be used to provide knowledge.  # noqa: E501

        :param denylist: The denylist of this OperationFillParametersOneOf1.
        :type denylist: List[str]
        """

        self._denylist = denylist

    @property
    def qedge_keys(self):
        """Gets the qedge_keys of this OperationFillParametersOneOf1.

        A list of qedge keys. If included only edges corresponding to the given qedge keys, as well as their connected nodes, will be filled. If not included all edges will be filled.  # noqa: E501

        :return: The qedge_keys of this OperationFillParametersOneOf1.
        :rtype: List[str]
        """
        return self._qedge_keys

    @qedge_keys.setter
    def qedge_keys(self, qedge_keys):
        """Sets the qedge_keys of this OperationFillParametersOneOf1.

        A list of qedge keys. If included only edges corresponding to the given qedge keys, as well as their connected nodes, will be filled. If not included all edges will be filled.  # noqa: E501

        :param qedge_keys: The qedge_keys of this OperationFillParametersOneOf1.
        :type qedge_keys: List[str]
        """

        self._qedge_keys = qedge_keys
