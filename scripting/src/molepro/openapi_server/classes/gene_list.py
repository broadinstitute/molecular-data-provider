# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.classes.base_model_ import Model
from openapi_server.classes.attribute import Attribute
from openapi_server.classes.collection_info import CollectionInfo
from openapi_server.classes.gene_info import GeneInfo
from openapi_server.classes.gene_list_all_of import GeneListAllOf
from openapi_server import util

from openapi_server.classes.attribute import Attribute  # noqa: E501
from openapi_server.classes.collection_info import CollectionInfo  # noqa: E501
from openapi_server.classes.gene_info import GeneInfo  # noqa: E501
from openapi_server.classes.gene_list_all_of import GeneListAllOf  # noqa: E501

class GeneList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, size=None, element_class=None, source=None, url=None, attributes=None, elements=None):  # noqa: E501
        """GeneList - a model defined in OpenAPI

        :param id: The id of this GeneList.  # noqa: E501
        :type id: str
        :param size: The size of this GeneList.  # noqa: E501
        :type size: int
        :param element_class: The element_class of this GeneList.  # noqa: E501
        :type element_class: str
        :param source: The source of this GeneList.  # noqa: E501
        :type source: str
        :param url: The url of this GeneList.  # noqa: E501
        :type url: str
        :param attributes: The attributes of this GeneList.  # noqa: E501
        :type attributes: List[Attribute]
        :param elements: The elements of this GeneList.  # noqa: E501
        :type elements: List[GeneInfo]
        """
        self.openapi_types = {
            'id': str,
            'size': int,
            'element_class': str,
            'source': str,
            'url': str,
            'attributes': List[Attribute],
            'elements': List[GeneInfo]
        }

        self.attribute_map = {
            'id': 'id',
            'size': 'size',
            'element_class': 'element_class',
            'source': 'source',
            'url': 'url',
            'attributes': 'attributes',
            'elements': 'elements'
        }

        self._id = id
        self._size = size
        self._element_class = element_class
        self._source = source
        self._url = url
        self._attributes = attributes
        self._elements = elements

    @classmethod
    def from_dict(cls, dikt) -> 'GeneList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gene_list of this GeneList.  # noqa: E501
        :rtype: GeneList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GeneList.

        ID of the collection.  # noqa: E501

        :return: The id of this GeneList.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeneList.

        ID of the collection.  # noqa: E501

        :param id: The id of this GeneList.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def size(self):
        """Gets the size of this GeneList.

        Number of elements in the collection.  # noqa: E501

        :return: The size of this GeneList.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GeneList.

        Number of elements in the collection.  # noqa: E501

        :param size: The size of this GeneList.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def element_class(self):
        """Gets the element_class of this GeneList.

        BioLink-compatible class of elements in this collection.  # noqa: E501

        :return: The element_class of this GeneList.
        :rtype: str
        """
        return self._element_class

    @element_class.setter
    def element_class(self, element_class):
        """Sets the element_class of this GeneList.

        BioLink-compatible class of elements in this collection.  # noqa: E501

        :param element_class: The element_class of this GeneList.
        :type element_class: str
        """
        if element_class is None:
            raise ValueError("Invalid value for `element_class`, must not be `None`")  # noqa: E501

        self._element_class = element_class

    @property
    def source(self):
        """Gets the source of this GeneList.

        Transformer that produced this collection.  # noqa: E501

        :return: The source of this GeneList.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GeneList.

        Transformer that produced this collection.  # noqa: E501

        :param source: The source of this GeneList.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def url(self):
        """Gets the url of this GeneList.

        URL to obtain members of this collection.  # noqa: E501

        :return: The url of this GeneList.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GeneList.

        URL to obtain members of this collection.  # noqa: E501

        :param url: The url of this GeneList.
        :type url: str
        """

        self._url = url

    @property
    def attributes(self):
        """Gets the attributes of this GeneList.

        Additional information and provenance about the collection.  # noqa: E501

        :return: The attributes of this GeneList.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GeneList.

        Additional information and provenance about the collection.  # noqa: E501

        :param attributes: The attributes of this GeneList.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes

    @property
    def elements(self):
        """Gets the elements of this GeneList.

        Members of the gene list.  # noqa: E501

        :return: The elements of this GeneList.
        :rtype: List[GeneInfo]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this GeneList.

        Members of the gene list.  # noqa: E501

        :param elements: The elements of this GeneList.
        :type elements: List[GeneInfo]
        """

        self._elements = elements
