# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.attribute import Attribute
from openapi_server.models.node_binding_id import NodeBindingId
from openapi_server.models.node_binding_query_id import NodeBindingQueryId
from openapi_server import util

from openapi_server.models.attribute import Attribute  # noqa: E501
from openapi_server.models.node_binding_id import NodeBindingId  # noqa: E501
from openapi_server.models.node_binding_query_id import NodeBindingQueryId  # noqa: E501

class NodeBinding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, query_id=None, attributes=None):  # noqa: E501
        """NodeBinding - a model defined in OpenAPI

        :param id: The id of this NodeBinding.  # noqa: E501
        :type id: NodeBindingId
        :param query_id: The query_id of this NodeBinding.  # noqa: E501
        :type query_id: NodeBindingQueryId
        :param attributes: The attributes of this NodeBinding.  # noqa: E501
        :type attributes: List[Attribute]
        """
        self.openapi_types = {
            'id': NodeBindingId,
            'query_id': NodeBindingQueryId,
            'attributes': List[Attribute]
        }

        self.attribute_map = {
            'id': 'id',
            'query_id': 'query_id',
            'attributes': 'attributes'
        }

        self._id = id
        self._query_id = query_id
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'NodeBinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeBinding of this NodeBinding.  # noqa: E501
        :rtype: NodeBinding
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NodeBinding.


        :return: The id of this NodeBinding.
        :rtype: NodeBindingId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeBinding.


        :param id: The id of this NodeBinding.
        :type id: NodeBindingId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def query_id(self):
        """Gets the query_id of this NodeBinding.


        :return: The query_id of this NodeBinding.
        :rtype: NodeBindingQueryId
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this NodeBinding.


        :param query_id: The query_id of this NodeBinding.
        :type query_id: NodeBindingQueryId
        """

        self._query_id = query_id

    @property
    def attributes(self):
        """Gets the attributes of this NodeBinding.

        A list of attributes providing further information about the node binding. This is not intended for capturing node attributes and should only be used for properties that vary from result to result.  # noqa: E501

        :return: The attributes of this NodeBinding.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this NodeBinding.

        A list of attributes providing further information about the node binding. This is not intended for capturing node attributes and should only be used for properties that vary from result to result.  # noqa: E501

        :param attributes: The attributes of this NodeBinding.
        :type attributes: List[Attribute]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501
        if attributes is not None and len(attributes) < 0:
            raise ValueError("Invalid value for `attributes`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._attributes = attributes
