# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.q_edge import QEdge
from openapi_server.models.q_node import QNode
from openapi_server.models.query_graph import QueryGraph
from openapi_server import util

from openapi_server.models.q_edge import QEdge  # noqa: E501
from openapi_server.models.q_node import QNode  # noqa: E501
from openapi_server.models.query_graph import QueryGraph  # noqa: E501

class MessageQueryGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nodes=None, edges=None):  # noqa: E501
        """MessageQueryGraph - a model defined in OpenAPI

        :param nodes: The nodes of this MessageQueryGraph.  # noqa: E501
        :type nodes: Dict[str, QNode]
        :param edges: The edges of this MessageQueryGraph.  # noqa: E501
        :type edges: Dict[str, QEdge]
        """
        self.openapi_types = {
            'nodes': Dict[str, QNode],
            'edges': Dict[str, QEdge]
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'edges': 'edges'
        }

        self._nodes = nodes
        self._edges = edges

    @classmethod
    def from_dict(cls, dikt) -> 'MessageQueryGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message_query_graph of this MessageQueryGraph.  # noqa: E501
        :rtype: MessageQueryGraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self):
        """Gets the nodes of this MessageQueryGraph.

        The node specifications. The keys of this map are unique node identifiers and the corresponding values include the constraints on bound nodes.  # noqa: E501

        :return: The nodes of this MessageQueryGraph.
        :rtype: Dict[str, QNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this MessageQueryGraph.

        The node specifications. The keys of this map are unique node identifiers and the corresponding values include the constraints on bound nodes.  # noqa: E501

        :param nodes: The nodes of this MessageQueryGraph.
        :type nodes: Dict[str, QNode]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def edges(self):
        """Gets the edges of this MessageQueryGraph.

        The edge specifications. The keys of this map are unique edge identifiers and the corresponding values include the constraints on bound edges, in addition to specifying the subject and object QNodes.  # noqa: E501

        :return: The edges of this MessageQueryGraph.
        :rtype: Dict[str, QEdge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this MessageQueryGraph.

        The edge specifications. The keys of this map are unique edge identifiers and the corresponding values include the constraints on bound edges, in addition to specifying the subject and object QNodes.  # noqa: E501

        :param edges: The edges of this MessageQueryGraph.
        :type edges: Dict[str, QEdge]
        """
        if edges is None:
            raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501

        self._edges = edges
