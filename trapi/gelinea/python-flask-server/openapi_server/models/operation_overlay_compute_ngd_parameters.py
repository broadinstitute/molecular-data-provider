# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OperationOverlayComputeNgdParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, virtual_relation_label=None, qnode_keys=None):  # noqa: E501
        """OperationOverlayComputeNgdParameters - a model defined in OpenAPI

        :param virtual_relation_label: The virtual_relation_label of this OperationOverlayComputeNgdParameters.  # noqa: E501
        :type virtual_relation_label: str
        :param qnode_keys: The qnode_keys of this OperationOverlayComputeNgdParameters.  # noqa: E501
        :type qnode_keys: List[str]
        """
        self.openapi_types = {
            'virtual_relation_label': str,
            'qnode_keys': List[str]
        }

        self.attribute_map = {
            'virtual_relation_label': 'virtual_relation_label',
            'qnode_keys': 'qnode_keys'
        }

        self._virtual_relation_label = virtual_relation_label
        self._qnode_keys = qnode_keys

    @classmethod
    def from_dict(cls, dikt) -> 'OperationOverlayComputeNgdParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OperationOverlayComputeNgd_parameters of this OperationOverlayComputeNgdParameters.  # noqa: E501
        :rtype: OperationOverlayComputeNgdParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def virtual_relation_label(self):
        """Gets the virtual_relation_label of this OperationOverlayComputeNgdParameters.

        An label to help identify the virtual edge in the relation field  # noqa: E501

        :return: The virtual_relation_label of this OperationOverlayComputeNgdParameters.
        :rtype: str
        """
        return self._virtual_relation_label

    @virtual_relation_label.setter
    def virtual_relation_label(self, virtual_relation_label):
        """Sets the virtual_relation_label of this OperationOverlayComputeNgdParameters.

        An label to help identify the virtual edge in the relation field  # noqa: E501

        :param virtual_relation_label: The virtual_relation_label of this OperationOverlayComputeNgdParameters.
        :type virtual_relation_label: str
        """
        if virtual_relation_label is None:
            raise ValueError("Invalid value for `virtual_relation_label`, must not be `None`")  # noqa: E501

        self._virtual_relation_label = virtual_relation_label

    @property
    def qnode_keys(self):
        """Gets the qnode_keys of this OperationOverlayComputeNgdParameters.

        A list of qnode keys to overlay pairwise edges onto. Must be be a list of at least 2 valid qnodes.  # noqa: E501

        :return: The qnode_keys of this OperationOverlayComputeNgdParameters.
        :rtype: List[str]
        """
        return self._qnode_keys

    @qnode_keys.setter
    def qnode_keys(self, qnode_keys):
        """Sets the qnode_keys of this OperationOverlayComputeNgdParameters.

        A list of qnode keys to overlay pairwise edges onto. Must be be a list of at least 2 valid qnodes.  # noqa: E501

        :param qnode_keys: The qnode_keys of this OperationOverlayComputeNgdParameters.
        :type qnode_keys: List[str]
        """
        if qnode_keys is None:
            raise ValueError("Invalid value for `qnode_keys`, must not be `None`")  # noqa: E501

        self._qnode_keys = qnode_keys
