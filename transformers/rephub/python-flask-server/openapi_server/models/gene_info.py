# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.attribute import Attribute
from openapi_server.models.gene_info_identifiers import GeneInfoIdentifiers
from openapi_server import util

from openapi_server.models.attribute import Attribute  # noqa: E501
from openapi_server.models.gene_info_identifiers import GeneInfoIdentifiers  # noqa: E501

class GeneInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gene_id=None, identifiers=None, attributes=None, source=None):  # noqa: E501
        """GeneInfo - a model defined in OpenAPI

        :param gene_id: The gene_id of this GeneInfo.  # noqa: E501
        :type gene_id: str
        :param identifiers: The identifiers of this GeneInfo.  # noqa: E501
        :type identifiers: GeneInfoIdentifiers
        :param attributes: The attributes of this GeneInfo.  # noqa: E501
        :type attributes: List[Attribute]
        :param source: The source of this GeneInfo.  # noqa: E501
        :type source: str
        """
        self.openapi_types = {
            'gene_id': str,
            'identifiers': GeneInfoIdentifiers,
            'attributes': List[Attribute],
            'source': str
        }

        self.attribute_map = {
            'gene_id': 'gene_id',
            'identifiers': 'identifiers',
            'attributes': 'attributes',
            'source': 'source'
        }

        self._gene_id = gene_id
        self._identifiers = identifiers
        self._attributes = attributes
        self._source = source

    @classmethod
    def from_dict(cls, dikt) -> 'GeneInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The gene_info of this GeneInfo.  # noqa: E501
        :rtype: GeneInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gene_id(self):
        """Gets the gene_id of this GeneInfo.

        Id of the gene. Preferably HGNC id; can be Entrez or ENSEMBL id if HGNC id is not available.  # noqa: E501

        :return: The gene_id of this GeneInfo.
        :rtype: str
        """
        return self._gene_id

    @gene_id.setter
    def gene_id(self, gene_id):
        """Sets the gene_id of this GeneInfo.

        Id of the gene. Preferably HGNC id; can be Entrez or ENSEMBL id if HGNC id is not available.  # noqa: E501

        :param gene_id: The gene_id of this GeneInfo.
        :type gene_id: str
        """
        if gene_id is None:
            raise ValueError("Invalid value for `gene_id`, must not be `None`")  # noqa: E501

        self._gene_id = gene_id

    @property
    def identifiers(self):
        """Gets the identifiers of this GeneInfo.


        :return: The identifiers of this GeneInfo.
        :rtype: GeneInfoIdentifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this GeneInfo.


        :param identifiers: The identifiers of this GeneInfo.
        :type identifiers: GeneInfoIdentifiers
        """

        self._identifiers = identifiers

    @property
    def attributes(self):
        """Gets the attributes of this GeneInfo.

        Additional information about the gene and provenance about gene-list membership.  # noqa: E501

        :return: The attributes of this GeneInfo.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GeneInfo.

        Additional information about the gene and provenance about gene-list membership.  # noqa: E501

        :param attributes: The attributes of this GeneInfo.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes

    @property
    def source(self):
        """Gets the source of this GeneInfo.

        Name of a transformer that added gene to the gene list.  # noqa: E501

        :return: The source of this GeneInfo.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this GeneInfo.

        Name of a transformer that added gene to the gene list.  # noqa: E501

        :param source: The source of this GeneInfo.
        :type source: str
        """

        self._source = source
