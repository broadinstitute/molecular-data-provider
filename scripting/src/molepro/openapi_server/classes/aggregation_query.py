# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.classes.base_model_ import Model
from openapi_server.classes.model_property import ModelProperty
from openapi_server import util

from openapi_server.classes.model_property import ModelProperty  # noqa: E501

class AggregationQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation=None, controls=None, collection_ids=None):  # noqa: E501
        """AggregationQuery - a model defined in OpenAPI

        :param operation: The operation of this AggregationQuery.  # noqa: E501
        :type operation: str
        :param controls: The controls of this AggregationQuery.  # noqa: E501
        :type controls: List[ModelProperty]
        :param collection_ids: The collection_ids of this AggregationQuery.  # noqa: E501
        :type collection_ids: List[str]
        """
        self.openapi_types = {
            'operation': str,
            'controls': List[ModelProperty],
            'collection_ids': List[str]
        }

        self.attribute_map = {
            'operation': 'operation',
            'controls': 'controls',
            'collection_ids': 'collection_ids'
        }

        self._operation = operation
        self._controls = controls
        self._collection_ids = collection_ids

    @classmethod
    def from_dict(cls, dikt) -> 'AggregationQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The aggregation_query of this AggregationQuery.  # noqa: E501
        :rtype: AggregationQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this AggregationQuery.

        Gene-list aggregation operation, one of 'union', 'intersection', 'difference','symmetric difference'.  # noqa: E501

        :return: The operation of this AggregationQuery.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this AggregationQuery.

        Gene-list aggregation operation, one of 'union', 'intersection', 'difference','symmetric difference'.  # noqa: E501

        :param operation: The operation of this AggregationQuery.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def controls(self):
        """Gets the controls of this AggregationQuery.

        Values that control the behavior of the aggregator. Names of the controls must match the names specified in the aggregator's definition and values must match types (and possibly  allowed_values) specified in the aggregator's definition.  # noqa: E501

        :return: The controls of this AggregationQuery.
        :rtype: List[ModelProperty]
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """Sets the controls of this AggregationQuery.

        Values that control the behavior of the aggregator. Names of the controls must match the names specified in the aggregator's definition and values must match types (and possibly  allowed_values) specified in the aggregator's definition.  # noqa: E501

        :param controls: The controls of this AggregationQuery.
        :type controls: List[ModelProperty]
        """

        self._controls = controls

    @property
    def collection_ids(self):
        """Gets the collection_ids of this AggregationQuery.

        Ids of the collections to be aggregated.  # noqa: E501

        :return: The collection_ids of this AggregationQuery.
        :rtype: List[str]
        """
        return self._collection_ids

    @collection_ids.setter
    def collection_ids(self, collection_ids):
        """Sets the collection_ids of this AggregationQuery.

        Ids of the collections to be aggregated.  # noqa: E501

        :param collection_ids: The collection_ids of this AggregationQuery.
        :type collection_ids: List[str]
        """
        if collection_ids is None:
            raise ValueError("Invalid value for `collection_ids`, must not be `None`")  # noqa: E501

        self._collection_ids = collection_ids
