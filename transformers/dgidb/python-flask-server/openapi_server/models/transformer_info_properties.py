# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TransformerInfoProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, list_predicate=None, member_predicate=None, source_url=None, terms_of_service=None, method=None):  # noqa: E501
        """TransformerInfoProperties - a model defined in OpenAPI

        :param list_predicate: The list_predicate of this TransformerInfoProperties.  # noqa: E501
        :type list_predicate: str
        :param member_predicate: The member_predicate of this TransformerInfoProperties.  # noqa: E501
        :type member_predicate: str
        :param source_url: The source_url of this TransformerInfoProperties.  # noqa: E501
        :type source_url: str
        :param terms_of_service: The terms_of_service of this TransformerInfoProperties.  # noqa: E501
        :type terms_of_service: str
        :param method: The method of this TransformerInfoProperties.  # noqa: E501
        :type method: str
        """
        self.openapi_types = {
            'list_predicate': str,
            'member_predicate': str,
            'source_url': str,
            'terms_of_service': str,
            'method': str
        }

        self.attribute_map = {
            'list_predicate': 'list_predicate',
            'member_predicate': 'member_predicate',
            'source_url': 'source_url',
            'terms_of_service': 'terms_of_service',
            'method': 'method'
        }

        self._list_predicate = list_predicate
        self._member_predicate = member_predicate
        self._source_url = source_url
        self._terms_of_service = terms_of_service
        self._method = method

    @classmethod
    def from_dict(cls, dikt) -> 'TransformerInfoProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The transformer_info_properties of this TransformerInfoProperties.  # noqa: E501
        :rtype: TransformerInfoProperties
        """
        return util.deserialize_model(dikt, cls)

    @property
    def list_predicate(self):
        """Gets the list_predicate of this TransformerInfoProperties.

        BioLink model predicate describing relationship between input and output gene lists.  # noqa: E501

        :return: The list_predicate of this TransformerInfoProperties.
        :rtype: str
        """
        return self._list_predicate

    @list_predicate.setter
    def list_predicate(self, list_predicate):
        """Sets the list_predicate of this TransformerInfoProperties.

        BioLink model predicate describing relationship between input and output gene lists.  # noqa: E501

        :param list_predicate: The list_predicate of this TransformerInfoProperties.
        :type list_predicate: str
        """

        self._list_predicate = list_predicate

    @property
    def member_predicate(self):
        """Gets the member_predicate of this TransformerInfoProperties.

        BioLink model predicate describing relationship between input and output genes.  # noqa: E501

        :return: The member_predicate of this TransformerInfoProperties.
        :rtype: str
        """
        return self._member_predicate

    @member_predicate.setter
    def member_predicate(self, member_predicate):
        """Sets the member_predicate of this TransformerInfoProperties.

        BioLink model predicate describing relationship between input and output genes.  # noqa: E501

        :param member_predicate: The member_predicate of this TransformerInfoProperties.
        :type member_predicate: str
        """

        self._member_predicate = member_predicate

    @property
    def source_url(self):
        """Gets the source_url of this TransformerInfoProperties.

        URL for underlying data or a wrapped service.  # noqa: E501

        :return: The source_url of this TransformerInfoProperties.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this TransformerInfoProperties.

        URL for underlying data or a wrapped service.  # noqa: E501

        :param source_url: The source_url of this TransformerInfoProperties.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def terms_of_service(self):
        """Gets the terms_of_service of this TransformerInfoProperties.

        Link to the page that describes the terms of service for the transformer.  # noqa: E501

        :return: The terms_of_service of this TransformerInfoProperties.
        :rtype: str
        """
        return self._terms_of_service

    @terms_of_service.setter
    def terms_of_service(self, terms_of_service):
        """Sets the terms_of_service of this TransformerInfoProperties.

        Link to the page that describes the terms of service for the transformer.  # noqa: E501

        :param terms_of_service: The terms_of_service of this TransformerInfoProperties.
        :type terms_of_service: str
        """

        self._terms_of_service = terms_of_service

    @property
    def method(self):
        """Gets the method of this TransformerInfoProperties.

        A method used to generate output gene lists.  # noqa: E501

        :return: The method of this TransformerInfoProperties.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this TransformerInfoProperties.

        A method used to generate output gene lists.  # noqa: E501

        :param method: The method of this TransformerInfoProperties.
        :type method: str
        """

        self._method = method
