# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.node import Node
from openapi_server.models.predicate import Predicate
from openapi_server import util

from openapi_server.models.node import Node  # noqa: E501
from openapi_server.models.predicate import Predicate  # noqa: E501

class KnowledgeMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_class=None, output_class=None, nodes=None, edges=None, predicates=None):  # noqa: E501
        """KnowledgeMap - a model defined in OpenAPI

        :param input_class: The input_class of this KnowledgeMap.  # noqa: E501
        :type input_class: str
        :param output_class: The output_class of this KnowledgeMap.  # noqa: E501
        :type output_class: str
        :param nodes: The nodes of this KnowledgeMap.  # noqa: E501
        :type nodes: Dict[str, Node]
        :param edges: The edges of this KnowledgeMap.  # noqa: E501
        :type edges: List[Predicate]
        :param predicates: The predicates of this KnowledgeMap.  # noqa: E501
        :type predicates: List[Predicate]
        """
        self.openapi_types = {
            'input_class': str,
            'output_class': str,
            'nodes': Dict[str, Node],
            'edges': List[Predicate],
            'predicates': List[Predicate]
        }

        self.attribute_map = {
            'input_class': 'input_class',
            'output_class': 'output_class',
            'nodes': 'nodes',
            'edges': 'edges',
            'predicates': 'predicates'
        }

        self._input_class = input_class
        self._output_class = output_class
        self._nodes = nodes
        self._edges = edges
        self._predicates = predicates

    @classmethod
    def from_dict(cls, dikt) -> 'KnowledgeMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The knowledge_map of this KnowledgeMap.  # noqa: E501
        :rtype: KnowledgeMap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_class(self):
        """Gets the input_class of this KnowledgeMap.

        BioLink class for the members of the input list.  # noqa: E501

        :return: The input_class of this KnowledgeMap.
        :rtype: str
        """
        return self._input_class

    @input_class.setter
    def input_class(self, input_class):
        """Sets the input_class of this KnowledgeMap.

        BioLink class for the members of the input list.  # noqa: E501

        :param input_class: The input_class of this KnowledgeMap.
        :type input_class: str
        """
        if input_class is None:
            raise ValueError("Invalid value for `input_class`, must not be `None`")  # noqa: E501

        self._input_class = input_class

    @property
    def output_class(self):
        """Gets the output_class of this KnowledgeMap.

        BioLink class for the members of the output list.  # noqa: E501

        :return: The output_class of this KnowledgeMap.
        :rtype: str
        """
        return self._output_class

    @output_class.setter
    def output_class(self, output_class):
        """Sets the output_class of this KnowledgeMap.

        BioLink class for the members of the output list.  # noqa: E501

        :param output_class: The output_class of this KnowledgeMap.
        :type output_class: str
        """
        if output_class is None:
            raise ValueError("Invalid value for `output_class`, must not be `None`")  # noqa: E501

        self._output_class = output_class

    @property
    def nodes(self):
        """Gets the nodes of this KnowledgeMap.

        List of semantic types in the KnowledgeMap.  # noqa: E501

        :return: The nodes of this KnowledgeMap.
        :rtype: Dict[str, Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this KnowledgeMap.

        List of semantic types in the KnowledgeMap.  # noqa: E501

        :param nodes: The nodes of this KnowledgeMap.
        :type nodes: Dict[str, Node]
        """

        self._nodes = nodes

    @property
    def edges(self):
        """Gets the edges of this KnowledgeMap.

        Predicates describing relationships between subjects and objects.  # noqa: E501

        :return: The edges of this KnowledgeMap.
        :rtype: List[Predicate]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this KnowledgeMap.

        Predicates describing relationships between subjects and objects.  # noqa: E501

        :param edges: The edges of this KnowledgeMap.
        :type edges: List[Predicate]
        """

        self._edges = edges

    @property
    def predicates(self):
        """Gets the predicates of this KnowledgeMap.

        Predicates describing relationships between subjects and objects.  # noqa: E501

        :return: The predicates of this KnowledgeMap.
        :rtype: List[Predicate]
        """
        return self._predicates

    @predicates.setter
    def predicates(self, predicates):
        """Sets the predicates of this KnowledgeMap.

        Predicates describing relationships between subjects and objects.  # noqa: E501

        :param predicates: The predicates of this KnowledgeMap.
        :type predicates: List[Predicate]
        """

        self._predicates = predicates
