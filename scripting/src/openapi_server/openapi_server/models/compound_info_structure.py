# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CompoundInfoStructure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, smiles=None, inchi=None, inchikey=None, source=None):  # noqa: E501
        """CompoundInfoStructure - a model defined in OpenAPI

        :param smiles: The smiles of this CompoundInfoStructure.  # noqa: E501
        :type smiles: str
        :param inchi: The inchi of this CompoundInfoStructure.  # noqa: E501
        :type inchi: str
        :param inchikey: The inchikey of this CompoundInfoStructure.  # noqa: E501
        :type inchikey: str
        :param source: The source of this CompoundInfoStructure.  # noqa: E501
        :type source: str
        """
        self.openapi_types = {
            'smiles': str,
            'inchi': str,
            'inchikey': str,
            'source': str
        }

        self.attribute_map = {
            'smiles': 'smiles',
            'inchi': 'inchi',
            'inchikey': 'inchikey',
            'source': 'source'
        }

        self._smiles = smiles
        self._inchi = inchi
        self._inchikey = inchikey
        self._source = source

    @classmethod
    def from_dict(cls, dikt) -> 'CompoundInfoStructure':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The compound_info_structure of this CompoundInfoStructure.  # noqa: E501
        :rtype: CompoundInfoStructure
        """
        return util.deserialize_model(dikt, cls)

    @property
    def smiles(self):
        """Gets the smiles of this CompoundInfoStructure.

        SMILES representation of the compound's structure.  # noqa: E501

        :return: The smiles of this CompoundInfoStructure.
        :rtype: str
        """
        return self._smiles

    @smiles.setter
    def smiles(self, smiles):
        """Sets the smiles of this CompoundInfoStructure.

        SMILES representation of the compound's structure.  # noqa: E501

        :param smiles: The smiles of this CompoundInfoStructure.
        :type smiles: str
        """

        self._smiles = smiles

    @property
    def inchi(self):
        """Gets the inchi of this CompoundInfoStructure.

        InChI representation of the compound's structure.  # noqa: E501

        :return: The inchi of this CompoundInfoStructure.
        :rtype: str
        """
        return self._inchi

    @inchi.setter
    def inchi(self, inchi):
        """Sets the inchi of this CompoundInfoStructure.

        InChI representation of the compound's structure.  # noqa: E501

        :param inchi: The inchi of this CompoundInfoStructure.
        :type inchi: str
        """

        self._inchi = inchi

    @property
    def inchikey(self):
        """Gets the inchikey of this CompoundInfoStructure.

        InChI key representation of the compound's structure.  # noqa: E501

        :return: The inchikey of this CompoundInfoStructure.
        :rtype: str
        """
        return self._inchikey

    @inchikey.setter
    def inchikey(self, inchikey):
        """Sets the inchikey of this CompoundInfoStructure.

        InChI key representation of the compound's structure.  # noqa: E501

        :param inchikey: The inchikey of this CompoundInfoStructure.
        :type inchikey: str
        """

        self._inchikey = inchikey

    @property
    def source(self):
        """Gets the source of this CompoundInfoStructure.

        Source of the compound's structure.  # noqa: E501

        :return: The source of this CompoundInfoStructure.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CompoundInfoStructure.

        Source of the compound's structure.  # noqa: E501

        :param source: The source of this CompoundInfoStructure.
        :type source: str
        """

        self._source = source
