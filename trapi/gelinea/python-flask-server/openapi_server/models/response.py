# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.log_entry import LogEntry
from openapi_server.models.response_message import ResponseMessage
from openapi_server.models.response_workflow import ResponseWorkflow
from openapi_server import util

from openapi_server.models.log_entry import LogEntry  # noqa: E501
from openapi_server.models.response_message import ResponseMessage  # noqa: E501
from openapi_server.models.response_workflow import ResponseWorkflow  # noqa: E501

class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, status=None, description=None, logs=None, workflow=None, schema_version=None, biolink_version=None):  # noqa: E501
        """Response - a model defined in OpenAPI

        :param message: The message of this Response.  # noqa: E501
        :type message: ResponseMessage
        :param status: The status of this Response.  # noqa: E501
        :type status: str
        :param description: The description of this Response.  # noqa: E501
        :type description: str
        :param logs: The logs of this Response.  # noqa: E501
        :type logs: List[LogEntry]
        :param workflow: The workflow of this Response.  # noqa: E501
        :type workflow: ResponseWorkflow
        :param schema_version: The schema_version of this Response.  # noqa: E501
        :type schema_version: str
        :param biolink_version: The biolink_version of this Response.  # noqa: E501
        :type biolink_version: str
        """
        self.openapi_types = {
            'message': ResponseMessage,
            'status': str,
            'description': str,
            'logs': List[LogEntry],
            'workflow': ResponseWorkflow,
            'schema_version': str,
            'biolink_version': str
        }

        self.attribute_map = {
            'message': 'message',
            'status': 'status',
            'description': 'description',
            'logs': 'logs',
            'workflow': 'workflow',
            'schema_version': 'schema_version',
            'biolink_version': 'biolink_version'
        }

        self._message = message
        self._status = status
        self._description = description
        self._logs = logs
        self._workflow = workflow
        self._schema_version = schema_version
        self._biolink_version = biolink_version

    @classmethod
    def from_dict(cls, dikt) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Response of this Response.  # noqa: E501
        :rtype: Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Response.


        :return: The message of this Response.
        :rtype: ResponseMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Response.


        :param message: The message of this Response.
        :type message: ResponseMessage
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def status(self):
        """Gets the status of this Response.

        One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable  # noqa: E501

        :return: The status of this Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Response.

        One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable  # noqa: E501

        :param status: The status of this Response.
        :type status: str
        """

        self._status = status

    @property
    def description(self):
        """Gets the description of this Response.

        A brief human-readable description of the outcome  # noqa: E501

        :return: The description of this Response.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Response.

        A brief human-readable description of the outcome  # noqa: E501

        :param description: The description of this Response.
        :type description: str
        """

        self._description = description

    @property
    def logs(self):
        """Gets the logs of this Response.

        A list of LogEntry items, containing errors, warnings, debugging information, etc. List items MUST be in chronological order with earliest first.  # noqa: E501

        :return: The logs of this Response.
        :rtype: List[LogEntry]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this Response.

        A list of LogEntry items, containing errors, warnings, debugging information, etc. List items MUST be in chronological order with earliest first.  # noqa: E501

        :param logs: The logs of this Response.
        :type logs: List[LogEntry]
        """
        if logs is not None and len(logs) < 0:
            raise ValueError("Invalid value for `logs`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._logs = logs

    @property
    def workflow(self):
        """Gets the workflow of this Response.


        :return: The workflow of this Response.
        :rtype: ResponseWorkflow
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this Response.


        :param workflow: The workflow of this Response.
        :type workflow: ResponseWorkflow
        """

        self._workflow = workflow

    @property
    def schema_version(self):
        """Gets the schema_version of this Response.

        Version label of the TRAPI schema used in this document  # noqa: E501

        :return: The schema_version of this Response.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this Response.

        Version label of the TRAPI schema used in this document  # noqa: E501

        :param schema_version: The schema_version of this Response.
        :type schema_version: str
        """

        self._schema_version = schema_version

    @property
    def biolink_version(self):
        """Gets the biolink_version of this Response.

        Version label of the Biolink model used in this document  # noqa: E501

        :return: The biolink_version of this Response.
        :rtype: str
        """
        return self._biolink_version

    @biolink_version.setter
    def biolink_version(self, biolink_version):
        """Sets the biolink_version of this Response.

        Version label of the Biolink model used in this document  # noqa: E501

        :param biolink_version: The biolink_version of this Response.
        :type biolink_version: str
        """

        self._biolink_version = biolink_version
