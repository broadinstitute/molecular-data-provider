# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Names(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, synonyms=None, source=None, url=None):  # noqa: E501
        """Names - a model defined in OpenAPI

        :param name: The name of this Names.  # noqa: E501
        :type name: str
        :param synonyms: The synonyms of this Names.  # noqa: E501
        :type synonyms: List[str]
        :param source: The source of this Names.  # noqa: E501
        :type source: str
        :param url: The url of this Names.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'name': str,
            'synonyms': List[str],
            'source': str,
            'url': str
        }

        self.attribute_map = {
            'name': 'name',
            'synonyms': 'synonyms',
            'source': 'source',
            'url': 'url'
        }

        self._name = name
        self._synonyms = synonyms
        self._source = source
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Names':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The names of this Names.  # noqa: E501
        :rtype: Names
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Names.

        Name of the compound.  # noqa: E501

        :return: The name of this Names.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Names.

        Name of the compound.  # noqa: E501

        :param name: The name of this Names.
        :type name: str
        """

        self._name = name

    @property
    def synonyms(self):
        """Gets the synonyms of this Names.

        Name of the compound.  # noqa: E501

        :return: The synonyms of this Names.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this Names.

        Name of the compound.  # noqa: E501

        :param synonyms: The synonyms of this Names.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def source(self):
        """Gets the source of this Names.

        Source of names and synonyms.  # noqa: E501

        :return: The source of this Names.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Names.

        Source of names and synonyms.  # noqa: E501

        :param source: The source of this Names.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def url(self):
        """Gets the url of this Names.

        URL for additional information.  # noqa: E501

        :return: The url of this Names.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Names.

        URL for additional information.  # noqa: E501

        :param url: The url of this Names.
        :type url: str
        """

        self._url = url
