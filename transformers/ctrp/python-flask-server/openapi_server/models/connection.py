# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.attribute import Attribute
from openapi_server import util

from openapi_server.models.attribute import Attribute  # noqa: E501

class Connection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_element_id=None, type=None, relation=None, evidence_type=None, source=None, provided_by=None, attributes=None):  # noqa: E501
        """Connection - a model defined in OpenAPI

        :param source_element_id: The source_element_id of this Connection.  # noqa: E501
        :type source_element_id: str
        :param type: The type of this Connection.  # noqa: E501
        :type type: str
        :param relation: The relation of this Connection.  # noqa: E501
        :type relation: str
        :param evidence_type: The evidence_type of this Connection.  # noqa: E501
        :type evidence_type: str
        :param source: The source of this Connection.  # noqa: E501
        :type source: str
        :param provided_by: The provided_by of this Connection.  # noqa: E501
        :type provided_by: str
        :param attributes: The attributes of this Connection.  # noqa: E501
        :type attributes: List[Attribute]
        """
        self.openapi_types = {
            'source_element_id': str,
            'type': str,
            'relation': str,
            'evidence_type': str,
            'source': str,
            'provided_by': str,
            'attributes': List[Attribute]
        }

        self.attribute_map = {
            'source_element_id': 'source_element_id',
            'type': 'type',
            'relation': 'relation',
            'evidence_type': 'evidence_type',
            'source': 'source',
            'provided_by': 'provided_by',
            'attributes': 'attributes'
        }

        self._source_element_id = source_element_id
        self._type = type
        self._relation = relation
        self._evidence_type = evidence_type
        self._source = source
        self._provided_by = provided_by
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The connection of this Connection.  # noqa: E501
        :rtype: Connection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_element_id(self):
        """Gets the source_element_id of this Connection.

        id (CURIE) of the connected query node  # noqa: E501

        :return: The source_element_id of this Connection.
        :rtype: str
        """
        return self._source_element_id

    @source_element_id.setter
    def source_element_id(self, source_element_id):
        """Sets the source_element_id of this Connection.

        id (CURIE) of the connected query node  # noqa: E501

        :param source_element_id: The source_element_id of this Connection.
        :type source_element_id: str
        """
        if source_element_id is None:
            raise ValueError("Invalid value for `source_element_id`, must not be `None`")  # noqa: E501

        self._source_element_id = source_element_id

    @property
    def type(self):
        """Gets the type of this Connection.

        Biolink predicate  # noqa: E501

        :return: The type of this Connection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Connection.

        Biolink predicate  # noqa: E501

        :param type: The type of this Connection.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def relation(self):
        """Gets the relation of this Connection.

        Lower-level relationship type of this connection  # noqa: E501

        :return: The relation of this Connection.
        :rtype: str
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this Connection.

        Lower-level relationship type of this connection  # noqa: E501

        :param relation: The relation of this Connection.
        :type relation: str
        """

        self._relation = relation

    @property
    def evidence_type(self):
        """Gets the evidence_type of this Connection.

        evidence supporting the statement from the ECO ontology  # noqa: E501

        :return: The evidence_type of this Connection.
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """Sets the evidence_type of this Connection.

        evidence supporting the statement from the ECO ontology  # noqa: E501

        :param evidence_type: The evidence_type of this Connection.
        :type evidence_type: str
        """

        self._evidence_type = evidence_type

    @property
    def source(self):
        """Gets the source of this Connection.

        Source of the attribute, as a CURIE prefix.  # noqa: E501

        :return: The source of this Connection.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Connection.

        Source of the attribute, as a CURIE prefix.  # noqa: E501

        :param source: The source of this Connection.
        :type source: str
        """

        self._source = source

    @property
    def provided_by(self):
        """Gets the provided_by of this Connection.

        Transformer that produced the connection.  # noqa: E501

        :return: The provided_by of this Connection.
        :rtype: str
        """
        return self._provided_by

    @provided_by.setter
    def provided_by(self, provided_by):
        """Sets the provided_by of this Connection.

        Transformer that produced the connection.  # noqa: E501

        :param provided_by: The provided_by of this Connection.
        :type provided_by: str
        """

        self._provided_by = provided_by

    @property
    def attributes(self):
        """Gets the attributes of this Connection.

        Additional information and provenance about the connection.  # noqa: E501

        :return: The attributes of this Connection.
        :rtype: List[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Connection.

        Additional information and provenance about the connection.  # noqa: E501

        :param attributes: The attributes of this Connection.
        :type attributes: List[Attribute]
        """

        self._attributes = attributes
