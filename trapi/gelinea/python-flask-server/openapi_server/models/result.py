# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.analysis import Analysis
from openapi_server.models.node_binding import NodeBinding
from openapi_server import util

from openapi_server.models.analysis import Analysis  # noqa: E501
from openapi_server.models.node_binding import NodeBinding  # noqa: E501

class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_bindings=None, analyses=None):  # noqa: E501
        """Result - a model defined in OpenAPI

        :param node_bindings: The node_bindings of this Result.  # noqa: E501
        :type node_bindings: Dict[str, List[NodeBinding]]
        :param analyses: The analyses of this Result.  # noqa: E501
        :type analyses: List[Analysis]
        """
        self.openapi_types = {
            'node_bindings': Dict[str, List[NodeBinding]],
            'analyses': List[Analysis]
        }

        self.attribute_map = {
            'node_bindings': 'node_bindings',
            'analyses': 'analyses'
        }

        self._node_bindings = node_bindings
        self._analyses = analyses

    @classmethod
    def from_dict(cls, dikt) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Result of this Result.  # noqa: E501
        :rtype: Result
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_bindings(self):
        """Gets the node_bindings of this Result.

        The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.  # noqa: E501

        :return: The node_bindings of this Result.
        :rtype: Dict[str, List[NodeBinding]]
        """
        return self._node_bindings

    @node_bindings.setter
    def node_bindings(self, node_bindings):
        """Sets the node_bindings of this Result.

        The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.  # noqa: E501

        :param node_bindings: The node_bindings of this Result.
        :type node_bindings: Dict[str, List[NodeBinding]]
        """
        if node_bindings is None:
            raise ValueError("Invalid value for `node_bindings`, must not be `None`")  # noqa: E501

        self._node_bindings = node_bindings

    @property
    def analyses(self):
        """Gets the analyses of this Result.

        The list of all Analysis components that contribute to the result. See below for Analysis components.  # noqa: E501

        :return: The analyses of this Result.
        :rtype: List[Analysis]
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this Result.

        The list of all Analysis components that contribute to the result. See below for Analysis components.  # noqa: E501

        :param analyses: The analyses of this Result.
        :type analyses: List[Analysis]
        """
        if analyses is None:
            raise ValueError("Invalid value for `analyses`, must not be `None`")  # noqa: E501
        if analyses is not None and len(analyses) < 0:
            raise ValueError("Invalid value for `analyses`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._analyses = analyses
