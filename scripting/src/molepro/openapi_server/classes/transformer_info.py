# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from molepro.openapi_server.classes.base_model_ import Model
from molepro.openapi_server.classes.knowledge_map import KnowledgeMap
from molepro.openapi_server.classes.parameter import Parameter
from molepro.openapi_server.classes.transformer_info_properties import TransformerInfoProperties
from molepro.openapi_server import util


class TransformerInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, label=None, description=None, url=None, version=None, status=None, function=None, knowledge_map=None, properties=None, parameters=None):  # noqa: E501
        """TransformerInfo - a model defined in OpenAPI

        :param name: The name of this TransformerInfo.  # noqa: E501
        :type name: str
        :param label: The label of this TransformerInfo.  # noqa: E501
        :type label: str
        :param description: The description of this TransformerInfo.  # noqa: E501
        :type description: str
        :param url: The url of this TransformerInfo.  # noqa: E501
        :type url: str
        :param version: The version of this TransformerInfo.  # noqa: E501
        :type version: str
        :param status: The status of this TransformerInfo.  # noqa: E501
        :type status: str
        :param function: The function of this TransformerInfo.  # noqa: E501
        :type function: str
        :param knowledge_map: The knowledge_map of this TransformerInfo.  # noqa: E501
        :type knowledge_map: KnowledgeMap
        :param properties: The properties of this TransformerInfo.  # noqa: E501
        :type properties: TransformerInfoProperties
        :param parameters: The parameters of this TransformerInfo.  # noqa: E501
        :type parameters: List[Parameter]
        """
        self.openapi_types = {
            'name': str,
            'label': str,
            'description': str,
            'url': str,
            'version': str,
            'status': str,
            'function': str,
            'knowledge_map': KnowledgeMap,
            'properties': TransformerInfoProperties,
            'parameters': List[Parameter]
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label',
            'description': 'description',
            'url': 'url',
            'version': 'version',
            'status': 'status',
            'function': 'function',
            'knowledge_map': 'knowledge_map',
            'properties': 'properties',
            'parameters': 'parameters'
        }

        self._name = name
        self._label = label
        self._description = description
        self._url = url
        self._version = version
        self._status = status
        self._function = function
        self._knowledge_map = knowledge_map
        self._properties = properties
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'TransformerInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The transformer_info of this TransformerInfo.  # noqa: E501
        :rtype: TransformerInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TransformerInfo.

        Name of the transformer.  # noqa: E501

        :return: The name of this TransformerInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransformerInfo.

        Name of the transformer.  # noqa: E501

        :param name: The name of this TransformerInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def label(self):
        """Gets the label of this TransformerInfo.

        Short label for GUI display.  # noqa: E501

        :return: The label of this TransformerInfo.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TransformerInfo.

        Short label for GUI display.  # noqa: E501

        :param label: The label of this TransformerInfo.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def description(self):
        """Gets the description of this TransformerInfo.

        Description of the transformer.  # noqa: E501

        :return: The description of this TransformerInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransformerInfo.

        Description of the transformer.  # noqa: E501

        :param description: The description of this TransformerInfo.
        :type description: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this TransformerInfo.

        Transformer's URL.  # noqa: E501

        :return: The url of this TransformerInfo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TransformerInfo.

        Transformer's URL.  # noqa: E501

        :param url: The url of this TransformerInfo.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def version(self):
        """Gets the version of this TransformerInfo.

        Transformer's version.  # noqa: E501

        :return: The version of this TransformerInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TransformerInfo.

        Transformer's version.  # noqa: E501

        :param version: The version of this TransformerInfo.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def status(self):
        """Gets the status of this TransformerInfo.

        Status of the transformer, one of 'online', 'offline'.  # noqa: E501

        :return: The status of this TransformerInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransformerInfo.

        Status of the transformer, one of 'online', 'offline'.  # noqa: E501

        :param status: The status of this TransformerInfo.
        :type status: str
        """
        allowed_values = ["online", "offline"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def function(self):
        """Gets the function of this TransformerInfo.

        Function of the transformer, one of 'producer', 'expander', 'filter', 'transformer', 'exporter', or 'aggregator'.  # noqa: E501

        :return: The function of this TransformerInfo.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this TransformerInfo.

        Function of the transformer, one of 'producer', 'expander', 'filter', 'transformer', 'exporter', or 'aggregator'.  # noqa: E501

        :param function: The function of this TransformerInfo.
        :type function: str
        """
        allowed_values = ["producer", "expander", "filter", "transformer", "exporter", "aggregator"]  # noqa: E501
        if function not in allowed_values:
            raise ValueError(
                "Invalid value for `function` ({0}), must be one of {1}"
                .format(function, allowed_values)
            )

        self._function = function

    @property
    def knowledge_map(self):
        """Gets the knowledge_map of this TransformerInfo.


        :return: The knowledge_map of this TransformerInfo.
        :rtype: KnowledgeMap
        """
        return self._knowledge_map

    @knowledge_map.setter
    def knowledge_map(self, knowledge_map):
        """Sets the knowledge_map of this TransformerInfo.


        :param knowledge_map: The knowledge_map of this TransformerInfo.
        :type knowledge_map: KnowledgeMap
        """
        if knowledge_map is None:
            raise ValueError("Invalid value for `knowledge_map`, must not be `None`")  # noqa: E501

        self._knowledge_map = knowledge_map

    @property
    def properties(self):
        """Gets the properties of this TransformerInfo.


        :return: The properties of this TransformerInfo.
        :rtype: TransformerInfoProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TransformerInfo.


        :param properties: The properties of this TransformerInfo.
        :type properties: TransformerInfoProperties
        """

        self._properties = properties

    @property
    def parameters(self):
        """Gets the parameters of this TransformerInfo.

        Parameters used to control the transformer.  # noqa: E501

        :return: The parameters of this TransformerInfo.
        :rtype: List[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TransformerInfo.

        Parameters used to control the transformer.  # noqa: E501

        :param parameters: The parameters of this TransformerInfo.
        :type parameters: List[Parameter]
        """

        self._parameters = parameters
